#!/usr/bin/env python2
"""The HeadDaemon manages a single node communicating with both the local fault
daemons and the applications. In addition communicates with the
ControllerDaemon, which it also maybe launched."""

import os
import copy
import subprocess
import signal
import socket
import logging
import select
import time

import daemon

def prefix_sum(array):
	"""Simple implementation of prefix sum. We don't want external dependencies."""

	out = []

	for idx, item in enumerate(array):
		if idx == 0:
			out.append(item)
		else:
			out.append(item + out[idx-1])

	return out

class HeadDaemon(object):
	"""The HeadDaemon class managing a single node."""

	def __init__(self):
		self.setup_logger()

		self.node_minimum_epoch = None
		self.barrier_count = None
		self.success_counter = None
		self.disconnected = None
		self.cleanups = None

		self.sockets = []
		self.packet_switch = {}

		self.controller = None

		self.shutdown = False

		self.hostname = socket.gethostname()
		self.address = socket.gethostbyname(self.hostname)

		self.controller_socket = None
		self.setup_server_socket()

#		# create signal handler
#		signal.signal(signal.SIGINT, self.signal_handler)
#		self.log.info('set up signal handler')

		# local data
		self.ranks = {}
		self.fault_daemons = {}

		# global data
		self.ranks_completed = set()
		self.local_rank_count = None
		self.local_ranks = []

		# global daemon
		self.root_node = None
		self.root_host = None
		self.node_waiting_set = set()
		self.global_node_count = None

		self.global_nodes = []

		self.world_size = int(os.environ['EXAMPI_WORLD_SIZE'])

		self.prepare_lookup()

		# generate message-function lookup
		self.generate_packet_switch()

	def __del__(self):
		self.log.info('shutting down socket')

		for sokt in self.sockets:
			sokt.close()

		if self.controller != None:
			self.controller.wait()
		self.log.info('shutting down')

#	def signal_handler(self, signal, frame):
#		self.log.warning("HEAD DAEMON signal received " + str(signal))
#
#		if self.controller != None:
#			self.controller.send_signal(signal)
#			self.controller.wait()
#
#		self.__del__()
#
#		sys.exit(11)

	def setup_logger(self):
		"""Setup logger for head daemon is needed."""

		if os.environ.get('EXAMPI_LOG_HEAD_DAEMON', None) == 'TRUE':
			self.log = logging.getLogger(__name__+'-'+str(os.environ['EXAMPI_RANK']))
			self.log.setLevel(logging.INFO)

			logname = 'head_daemon_' + str(os.environ['EXAMPI_RANK']) + '.log'

			handler = logging.FileHandler(logname)
			handler.setLevel(logging.INFO)

			self.log.addHandler(handler)

		else:
			self.log = logging.getLogger(__name__)
			self.log.addHandler(logging.NullHandler())

	def setup_server_socket(self):
		"""Setup socket for communication with FaultDaemons and application."""

		# create socket
		self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.server_socket.setblocking(0)

		self.server_socket.bind((self.address, int(os.environ['EXAMPI_HEAD_DAEMON_PORT'])))
		self.server_socket.listen(5)

		self.sockets.append(self.server_socket)

	def generate_packet_switch(self):
		"""Setup packet switch dictionary for packet handling."""

		# process -> head daemon(1)
		self.packet_switch['barrier'] = self.process_barrier
		self.packet_switch['lookup'] = self.process_rank_lookup
		self.packet_switch['cleanup'] = self.process_cleanup
		self.packet_switch['shutdown_ack'] = self.process_shutdown_ack

		# fault daemon -> head daemon
		self.packet_switch['termination'] = self.process_termination

		# controller -> head daemons -> fault daemons(+)
		self.packet_switch['release'] = self.process_release
		self.packet_switch['error'] = self.process_error
		self.packet_switch['shutdown'] = self.process_shutdown
		self.packet_switch['commit'] = self.process_commit

	def prepare_lookup(self):
		"""Prepare lookup caches for slurm and local lookup requests."""

		if os.environ['EXAMPI_ENV'] == 'local':
			self.local_rank_count = int(os.environ['EXAMPI_WORLD_SIZE'])
			self.local_ranks = range(int(os.environ['EXAMPI_WORLD_SIZE']))

			self.global_node_count = 1
			self.global_nodes = [socket.gethostname()]

			self.root_node = socket.gethostname()
			self.root_host = socket.gethostbyname(self.root_node)

		elif os.environ['EXAMPI_ENV'] == 'slurm':
			# fill local ranks
			self.local_ranks = [int(gid) for gid in os.environ['EXAMPI_GTIDS'].split(',')]
			self.local_rank_count = len(self.local_ranks)

			command = ['scontrol', 'show', 'hostnames', os.environ['EXAMPI_NODELIST']]
			self.log.info('calling command %s', str(command))

			process = subprocess.Popen(command, stdout=subprocess.PIPE)
			stdout, stderr = process.communicate()

			self.global_nodes = stdout.splitlines()

			if not self.global_nodes:
				self.log.error('scontrol call failed')
				raise ValueError

			self.log.info('asked slurm for hostnames: %s', str(self.global_nodes))
			self.global_node_count = len(self.global_nodes)

			self.root_node = self.global_nodes[0]
			self.root_host = socket.gethostbyname(self.root_node)

			prefixes = []
			for element in os.environ['EXAMPI_TASKS_PER_NODE'].split(','):
				self.log.info('processing element %s', element)

				# XXX SLURM specific
				if '(' in element:
					# combined task count for multiple nodes: 143(x21)
					count, mult = element.split('(x')

					self.log.info('count %s mult %s', count, mult)

					for idx in xrange(int(mult[:-1])):
						prefixes.append(int(count))

				else:
					# simple task count for node
					prefixes.append(int(element))


			self.task_offsets = prefix_sum(prefixes)
			self.log.info('prefixes %s prefix sum %s', prefixes, self.task_offsets)

		else:
			self.log.error('environment not recognized %s', os.environ['EXAMPI_ENV'])
			raise ValueError

	def launch_controller_daemon(self):
		"""Launches the controller daemon if global id is 0."""

		self.log.info('checking responsibility for controller')
		if int(os.environ['EXAMPI_RANK']) == 0 and self.controller is None:
			self.log.info('launching ControllerDaemon')

			env = dict(copy.deepcopy(os.environ))
			env['EXAMPI_NODE_COUNT'] = str(self.global_node_count)

			command = ['exampi_controller_daemon']
			self.controller = subprocess.Popen(command, env=env)

			self.log.info('launched ControllerDaemon')

	def launch(self):
		"""Launching HeadDaemon."""

		self.log.info('launching HeadDaemon')

		# launch ControllerDaemon if required
		self.launch_controller_daemon()

		self.shutdown = False
		while not self.shutdown:
			readables, writables, exceptionals = select.select(self.sockets, [], [])

			for readable in readables:
				if readable is self.server_socket:
					# handle connection request
					connection, client = readable.accept()
					connection.setblocking(0)

					self.log.info('connection accepted from %s', client)

					# add connection socket to tracked sockets
					self.sockets.append(connection)

				else:
					packet = readable.recv(64)

					if packet:
						# recv on client socket
						packet = packet.decode('utf-8').replace('\0', '')
						self.log.info('packet received from %s', readable.getpeername())
						self.log.info('packet: "%s"', packet)
						data = packet.split(' ')

						# look up and execute
						packet_handler = self.packet_switch.get(data[0], None)
						if packet_handler:
							self.log.info('found packet handler')
							packet_handler(readable, data[1:])

						else:
							self.log.error('failed to handle: %s', packet)
							raise ValueError

			for writable in writables:
				pass

			for exceptional in exceptionals:
				pass

			# check for orphaned process
			if os.getppid() == 1:
				self.log.info('detected this process is orphaned. Shutting down now...')
				self.shutdown = True

		self.log.info('shutting down HeadDaemon')

	def send_to_controller(self, data):
		"""Send data in utf-8 to ControllerDaemon."""

		self.log.info('sending to controller: %s', data)

		# set up connection to controller tcp
		if self.controller_socket is None:
			self.controller_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

			while True:
				try:
					self.controller_socket.connect((self.root_node,
					                                int(os.environ['EXAMPI_CONTROLLER_DAEMON_PORT'])))
					self.controller_socket.setblocking(0)
					self.log.info('connected to controller socket')
				except socket.error:
					time.sleep(0.1)
				else:
					break

			self.sockets.append(self.controller_socket)

		self.controller_socket.send(data)

		self.log.info('finished sending to controller')

	def send_to_rank(self, data, rank):
		"""Send data in utf-8 to rank."""

		self.log.info('sending to rank %i:%s', rank, data)

		self.ranks[rank]['socket'].send(data)

		self.log.info('finished sending to %i', rank)

	def send_to_ranks(self, data):
		"""Send data in utf-8 to all known ranks."""

		self.log.info('sending %s to all ranks', data)

		for rank in self.ranks:
			self.send_to_rank(data, rank)

		self.log.info('finished sending to all ranks')

	def send_to_fault_daemon(self, data, rank):
		"""Send data in utf-8 to fault daemon."""

		self.log.info('sending to fault daemon %i:%s', rank, data)

		self.fault_daemons[rank]['socket'].send(data)

		self.log.info('finished sending to fault daemon')

	def send_to_fault_daemons(self, data):
		"""Send data in utf-8 to all known fault daemons."""

		self.log.info('sending %s to all fault daemons', data)

		for dmn in self.fault_daemons:
			self.send_to_fault_daemon(data, dmn)

		self.log.info('finished sending to all fault daemons')

	def process_barrier(self, sokt, contents):
		"""Handle process barrier packet."""

		# barrier RANK PID
		rank = int(contents[0])
		pid = int(contents[1])

		# register rank for barrier
		if rank not in self.ranks:
			self.ranks[rank] = {'pid':pid, 'socket':sokt}
			self.log.info('registered rank %i pid %i waiting', rank, pid)

		if self.barrier_count is None:
			self.barrier_count = 1
		else:
			self.barrier_count += 1

		# check if all local ranks are waiting
		if self.barrier_count == self.local_rank_count:
			self.barrier_count = None

			self.log.info('registered all local ranks, sending global barrier to controller')

			data = ('node_barrier ' + socket.gethostname() + '\0').ljust(64).encode('utf-8')
			self.send_to_controller(data)
			self.log.info('sent node_barrier')

	def process_release(self, sokt, contents):
		"""Handle release packet from controller daemon."""

		# forward release to all ranks
		self.log.info('present ranks %s', self.ranks.keys())

		data = 'release\0'.ljust(64).encode('utf-8')
		self.send_to_ranks(data)

	def process_termination(self, sokt, contents):
		"""Handle termination packet from fault daemon."""

		# termination RANK ERRORCODE EPOCH
		rank = int(contents[0])
		errorcode = int(contents[1])
		epoch = int(contents[2])

		# remove process
		del self.ranks[rank]

		# register fault daemon
		self.fault_daemons[rank] = {'rank':rank, 'errorcode':errorcode, 'epoch':epoch, 'socket':sokt}

		# process errorcode
		if errorcode == daemon.errorcodes['MPIX_TRY_RELOAD']:
			msg = 'process_exit %s %i %i %i\0' % (self.hostname, rank, errorcode, epoch)
			self.log.info('forwarding exit to controller: %s', msg)

			data = msg.ljust(64).encode('utf-8')
			self.send_to_controller(data)

		elif errorcode == daemon.errorcodes['MPI_SUCCESS']:
			# if MPI_SUCCESS don't forward until later
			# register successful exit
			# if all exited successfully sent node_success

			# increment success counter
			if self.success_counter is None:
				self.success_counter = 1
			else:
				self.success_counter += 1

			self.log.info('register process exit MPI_SUCCESS')

			# once all have succeeded
			if self.success_counter == self.local_rank_count:
				self.success_counter = None

				msg = 'node_success ' + self.hostname + '\0'

				self.log.info('forwarding termination to controller: %s', msg)

				data = msg.ljust(64).encode('utf-8')
				self.send_to_controller(data)

		else:
			self.log.error('unknown errorcode received %s', contents)

			# TODO shut everything down

			raise ValueError

	def process_shutdown(self, sokt, contents):
		"""Handle shutdown packet from controller daemon."""

		self.log.info('received global shutdown from controller, shutting down...')
		self.log.info('sending shutdown to all fault daemons')

		data = 'shutdown\0'.ljust(64).encode('utf-8')
		self.send_to_fault_daemons(data)

	def process_shutdown_ack(self, sokt, contents):
		"""Handle shutdown acknowledgement from fault daemons."""

		# client is closing connection
		self.log.info('client is closing connection %s', contents[0])

		# increment disconnected counter
		if self.disconnected is None:
			self.disconnected = 1
		else:
			self.disconnected += 1

		# when all disconnected
		if self.disconnected == self.local_rank_count:
			self.disconnected = None

			self.controller_socket.send(('node_shutdown ' + str(self.hostname)).ljust(64).encode('utf-8'))
			self.controller_socket.close()

			self.shutdown = True

	def process_rank_lookup(self, sokt, contents):
		"""Process lookup request."""

		rank = int(contents[0])
		self.log.info('lookup for %i', rank)

		if os.environ['EXAMPI_ENV'] == 'local':
			# all ranks are on local node (shared node/computer)
			self.log.info('found rank %i local', rank)

			hostname = self.hostname
			address = self.address

		elif os.environ['EXAMPI_ENV'] == 'slurm':
			if rank in self.local_ranks:
				# rank is found on local node
				self.log.info('found rank %i local', rank)

				hostname = self.hostname
				address = self.address

			else:
				# rank is not on local node
				self.log.info('rank %i is not local', rank)

				for idx, bound in enumerate(self.task_offsets):
					if rank < bound:
						hostname = self.global_nodes[idx]
						address = socket.gethostbyname(hostname)
						self.log.info('found %s %s', hostname, address)

						break

		else:
			self.log.error('environment not recognized %s', os.environ['EXAMPI_ENV'])
			raise ValueError

		# respond to request
		msg = 'rank %i %s %s' % (rank, hostname, address)
		self.log.info('responding "%s"', msg)
		sokt.send(msg.ljust(64).encode('utf-8'))

	def process_error(self, sokt, contents):
		"""Handle error packet from ControllerDaemon. An error occured somewhere, gather node epoch."""

		self.log.info('starting to signal all on-node processes')

		controller_epoch = int(contents[0])

		# check if node only has dead processes
		if not self.ranks:
			self.log.info('all processes resident on node are dead')

			# send node_epoch automatically
			msg = 'node_epoch ' + str(controller_epoch) + '\0'
			data = msg.ljust(64).encode('utf-8')
			self.send_to_controller(data)

		else:
			for rank in self.ranks:
				pid = self.ranks[rank]['pid']

				# signal mpi process for error state
				self.log.info('signalling rank ' + str(rank) + ' with pid ' + str(pid))
				os.kill(pid, signal.SIGUSR2)
				# processes will send cleanup

		self.log.info('finished signalling %i ranks', len(self.ranks))

	def process_cleanup(self, sokt, contents):
		"""Handle clean up packet from application."""

		rank = int(contents[0])
		epoch = int(contents[1])

		self.ranks[rank]['epoch'] = epoch
		if self.node_minimum_epoch is None:
			self.node_minimum_epoch = epoch
		else:
			self.node_minimum_epoch = min(self.node_minimum_epoch, epoch)

		# increment cleanups
		if self.cleanups is None:
			self.cleanups = 1
		else:
			self.cleanups += 1

		# check if all cleanups complete
		if self.cleanups == len(self.ranks):
			# always send minimum epoch number
			msg = 'node_epoch ' + str(self.node_minimum_epoch) + '\0'
			data = msg.ljust(64).encode('utf-8')
			self.send_to_controller(data)

			self.cleanups = None
			self.node_minimum_epoch = None

	def process_commit(self, sokt, contents):
		"""Handle epoch commit from controller."""

		# controller has decided on epoch
		epoch = int(contents[0])

		# send commit to alive ranks
		msg = 'commit ' + str(epoch) + '\0'
		data = msg.ljust(64).encode('utf-8')
		self.send_to_ranks(data)

		# send restart to active fault daemons
		msg = 'restart ' + str(epoch) + '\0'
		data = msg.ljust(64).encode('utf-8')
		self.send_to_fault_daemons(data)

		# TODO remove active fault daemons
		# they are going inactive after received 'restart'

def main():
	"""Main function launches HeadDaemon."""

	#
	instance = HeadDaemon()
	instance.launch()

if __name__ == '__main__':
	main()
