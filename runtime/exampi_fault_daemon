#!/usr/bin/env python2

import os
import sys
import copy
import tempfile
import subprocess
import socket

def prefix_sum(array):
	out = []

	for idx, item in enumerate(array):
		if idx == 0:
			out.append(item)
		else:
			out.append(item + out[idx-1])

	return out

def decompress_hostnames():
	nodes = os.environ['SLURM_JOB_NODELIST']
	
	command = ['scontrol']
	command.append('show')
	command.append('hostnames')
	command.append(nodes)

	process = subprocess.Popen(command, stdout=subprocess.PIPE)
	stdout, stderr = process.communicate()

	global nodelist
	nodelist = stdout.splitlines()

def lookup_setup():
	if os.environ['EXAMPI_ENV'] == 'local':
		return

	global local_global_ids
	local_global_ids = [int(gid) for gid in os.environ['SLURM_GTIDS'].split(',')]

	global local_nodename
	local_nodename = os.environ['SLURMD_NODENAME']

	# uncompress task list
	prefixes = []
	for element in os.environ['SLURM_TASKS_PER_NODE'].split(','):
		if '(' in element:
			#143(x27)
			count, mult = element.split('(x')

			for idx in xrange(int(mult[:-1])):
				prefixes.append(int(count))

		else:
			prefixes.append(int(element))

	# generate prefix sum array
	global task_count_offsets
	task_count_offsets = prefix_sum(prefixes)

	# flatten node list
	decompress_hostnames()

def lookup_rank(rank):
	if os.environ['EXAMPI_ENV'] == 'local':
		return socket.gethostname()

	else:
		# local rank
		if rank in local_global_ids:
			print('local global ids contains', rank)
			return local_nodename

		# global rank 
		else:
			print('global', rank, ' tasks dist ', task_count_offsets)
			for idx, bound in enumerate(task_count_offsets):
				if rank < bound:
					return nodelist[idx]

def modify_environment(daemon_port, mpi_base_port, udp_transport_base):
	env = dict(copy.deepcopy(os.environ))

	# announce proper launch	
	env['EXAMPI_MONITORED'] = 'TRUE'

	if env['EXAMPI_ENV'] == 'slurm':
		#
		env['EXAMPI_LOCALID'] = str(env['SLURM_LOCALID'])
		env['EXAMPI_JOB_ID'] = str(env['SLURM_JOB_ID'])

		# application MPI rank
		rank = int(env['SLURM_PROCID'])
		job_id = int(env['SLURM_JOB_ID'])
		worldsize = int(env['SLURM_NTASKS'])

		env['EXAMPI_RANK'] = str(rank)
		
	else:
		# local
		rank = int(env['EXAMPI_RANK'])
		job_id = int(env['EXAMPI_JOB_ID'])
		worldsize = int(env['EXAMPI_WORLD_SIZE'])

	# announce daemon socket port
	env['EXAMPI_DAEMON_PORT'] = str(daemon_port)
	env['EXAMPI_UDP_TRANSPORT_BASE'] = str(udp_transport_base)
	env['EXAMPI_MPI_PORT'] = str(mpi_base_port + int(env['EXAMPI_RANK']))
	
	# write config file

	# TODO these both should be environment variables if needed at all
	config	= 'ppid:' + str(os.getpid()) + '\n'
	config += 'size:' + str(worldsize) + '\n'
	
	# TODO don't do this, this is static connection building
	# should at the very least be a runtime option
	# TODO this should be done through a runtime request throguh daemon sockets
	# TODO ask them which node that process lives on?
	for irank in xrange(worldsize):
		hostname = lookup_rank(irank) 
		print(irank, hostname)
		# TODO hostname -> ip
		ip = socket.gethostbyname(hostname)
		config += str(irank) + ':' + ip + ':' + str(daemon_port) + ':' + str(udp_transport_base + irank) + '\n'

	# TODO tmp
	print(config)
	sys.stdout.flush()
	
	with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_'+str(job_id)+'_'+str(rank)) as config_file:
		env['EXAMPI_CONFIG_FILE'] = config_file.name
		
		config_file.write(config)
	print('config file:', env['EXAMPI_CONFIG_FILE'])
	
	# write config variables to environment
	# TODO do we need PID?
	env['EXAMPI_DAEMON_PID'] = str(os.getpid())
	env['EXAMPI_WORLD_SIZE'] = str(worldsize)

	# application epoch
	epoch = 0
	env['EXAMPI_EPOCH'] = str(epoch)

	# write epoch file
	with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='_'+str(job_id)+'_'+str(rank)) as epoch_file:
		env['EXAMPI_EPOCH_FILE'] = epoch_file.name
		epoch_file.write(str(epoch))

	return env

def launch_application(environment):
	# prepare stdout and stderr files
	rank = int(environment['EXAMPI_RANK'])
	job_id = int(environment['EXAMPI_JOB_ID'])

	output_name = 'mpi.%i.%i.out' % (job_id, rank)
	error_name = 'mpi.%i.%i.err' % (job_id, rank)

	output_file = open(output_name, 'a')
	error_file = open(error_name, 'a')

	# launch application
	command = sys.argv[1:]

	print('fault_daemon launching:', command)
	process = subprocess.Popen(command, env=environment, stdout=output_file, stderr=error_file)

	process.wait()
	
	# clean up file handles
	output_file.close()
	error_file.close()

	return process.returncode

def inform_head_daemon(code, daemon_port, env):
	sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

	hostname = socket.gethostname()
	host = socket.gethostbyname(hostname)

	# todo need to bind to port

	msg = 'termination ' + str(env['EXAMPI_RANK']) + ' ' + str(code)
	msg = msg.ljust(64)
	msg = msg.encode('utf-8')

	sock.sendto(msg, (host, daemon_port))
	
	# potentially relaunch application
	# TODO
	
	sock.close()
	return code

def start_head_daemon(env):
	print('test head daemon viability', env['EXAMPI_LOCALID'], env['EXAMPI_RANK'])
	if env['EXAMPI_LOCALID'] == '0':
		print('fault daemon', env['EXAMPI_RANK'], ' launching head daemon')

		command = ['exampi_head_daemon']

		head_daemon = subprocess.Popen(command, env=env)
		return head_daemon
	
if __name__ == '__main__':
	lookup_setup()

	daemon_port = 12424
	mpi_base_port = 23324

	udp_transport_base = 33324

	# modify environment
	environment = modify_environment(daemon_port, mpi_base_port, udp_transport_base)

	# check if this daemon is node head daemon
	head_daemon = start_head_daemon(environment)

	# launch application process	
	returncode = launch_application(environment)

	# resolve
	returncode = inform_head_daemon(returncode, daemon_port, environment)
	
	# we this fault daemon launch the head daemon
	if head_daemon is not None:
		head_daemon.wait()
	
	# delete config file
	# TODO
	
	# propagate error code
	print('fault daemon', environment['EXAMPI_RANK'], 'exiting')
	sys.exit(returncode)
