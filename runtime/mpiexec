#! /usr/bin/env python2

import sys, os, re, argparse, subprocess, time, signal

schedulers = ['local', 'slurm', 'osg', 'sge']

def handler_siguser1(signum, frame):
	pass

def run_local(numproc, program):
	# start numproc processes of program

	# launch program instances
	processes = []
	for rank in xrange(numproc):
		# seperate binary
		child = [program[0]]

		# insert ExaMPI arguments
		configname = 'mpirun.%i.config.tmp' % rank
		child.append(configname)

		child.append(str(rank))

		epochname = 'mpirun.%i.epoch.tmp' % rank
		child.append(epochname)

		epoch = 0
		child.append(str(epoch))

		# append user arguments
		child.extend(program[1:])

		print(child)

		process = subprocess.Popen(child)
		
		processes.append(process)

	# pray MPI_Init doesn't die
	# 

	# monitor children
	while True:
		for process in processes:
			# wait 100ms between processes
			time.sleep(0.1)

			# check if process is alive 
			if process.poll() is not None:
				# process has exited
				# TODO check return code
				#process.returncode
				# this replaces term returncode

	# TODO could send signals, or poll, etc...
	# mpiexec acts as daemon

def run_slurm():
	# TODO execute srun externally, plugin required
	print("SLURM NOT IMPLEMENTED, THIS IS A STUB")
	
def run_sge():
	# TODO
	print("SGE/OSG NOT IMPLEMENTED, THIS IS A STUB")
	print("WE DON'T WANT THIS, SWITCH TO SLURM")

if __name__ == '__main__':
	# command line argument parsing
	parser = argparse.ArgumentParser(description="ExaMPI Process Initiator")

	parser.add_argument('-n', metavar='<numprocs>', type=int, required=True, help='Number of processes to start (required).')

	parser.add_argument('-s', default=schedulers[0], metavar='<scheduler>', type=str, help='Job scheduler environment to use.', choices=schedulers)
	
	parser.add_argument('program', metavar='<program>', type=str, nargs=argparse.REMAINDER, help='Program binary to execute with flags.')

	# TODO add additional argument possible by standard, section 8.8
	
	arguments = parser.parse_args()
	
	# switch between local, slurm and osg
	if arguments.s is schedulers[0]:
		# local scheduler ie run locally multiple processes
		run_local(arguments.n, arguments.program)
	
	elif arguments.s is scheduler[1]:
		# use SLURM
		run_slurm()

	elif arguments.s is scheduler[2] or arguments.s is scheduler[3]:
		# use SGE or OSG
		run_sge()
